/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
)

// checks if the FixedAddressStructMsServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FixedAddressStructMsServer{}

// FixedAddressStructMsServer Microsoft Server Fields to search fixed address
type FixedAddressStructMsServer struct {
	// Struct Field for MS Server
	Struct *string `json:"_struct,omitempty"`
	// The IPv4 address to perform the search with
	Ipv4addr             *string `json:"ipv4addr,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FixedAddressStructMsServer FixedAddressStructMsServer

// NewFixedAddressStructMsServer instantiates a new FixedAddressStructMsServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedAddressStructMsServer() *FixedAddressStructMsServer {
	this := FixedAddressStructMsServer{}
	return &this
}

// NewFixedAddressStructMsServerWithDefaults instantiates a new FixedAddressStructMsServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedAddressStructMsServerWithDefaults() *FixedAddressStructMsServer {
	this := FixedAddressStructMsServer{}
	return &this
}

// GetStruct returns the Struct field value if set, zero value otherwise.
func (o *FixedAddressStructMsServer) GetStruct() string {
	if o == nil || IsNil(o.Struct) {
		var ret string
		return ret
	}
	return *o.Struct
}

// GetStructOk returns a tuple with the Struct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedAddressStructMsServer) GetStructOk() (*string, bool) {
	if o == nil || IsNil(o.Struct) {
		return nil, false
	}
	return o.Struct, true
}

// HasStruct returns a boolean if a field has been set.
func (o *FixedAddressStructMsServer) HasStruct() bool {
	if o != nil && !IsNil(o.Struct) {
		return true
	}

	return false
}

// SetStruct gets a reference to the given string and assigns it to the Struct field.
func (o *FixedAddressStructMsServer) SetStruct(v string) {
	o.Struct = &v
}

// GetIpv4addr returns the Ipv4addr field value if set, zero value otherwise.
func (o *FixedAddressStructMsServer) GetIpv4addr() string {
	if o == nil || IsNil(o.Ipv4addr) {
		var ret string
		return ret
	}
	return *o.Ipv4addr
}

// GetIpv4addrOk returns a tuple with the Ipv4addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedAddressStructMsServer) GetIpv4addrOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4addr) {
		return nil, false
	}
	return o.Ipv4addr, true
}

// HasIpv4addr returns a boolean if a field has been set.
func (o *FixedAddressStructMsServer) HasIpv4addr() bool {
	if o != nil && !IsNil(o.Ipv4addr) {
		return true
	}

	return false
}

// SetIpv4addr gets a reference to the given string and assigns it to the Ipv4addr field.
func (o *FixedAddressStructMsServer) SetIpv4addr(v string) {
	o.Ipv4addr = &v
}

func (o FixedAddressStructMsServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FixedAddressStructMsServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Struct) {
		toSerialize["_struct"] = o.Struct
	}
	if !IsNil(o.Ipv4addr) {
		toSerialize["ipv4addr"] = o.Ipv4addr
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FixedAddressStructMsServer) UnmarshalJSON(data []byte) (err error) {
	varFixedAddressStructMsServer := _FixedAddressStructMsServer{}

	err = json.Unmarshal(data, &varFixedAddressStructMsServer)

	if err != nil {
		return err
	}

	*o = FixedAddressStructMsServer(varFixedAddressStructMsServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "_struct")
		delete(additionalProperties, "ipv4addr")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFixedAddressStructMsServer struct {
	value *FixedAddressStructMsServer
	isSet bool
}

func (v NullableFixedAddressStructMsServer) Get() *FixedAddressStructMsServer {
	return v.value
}

func (v *NullableFixedAddressStructMsServer) Set(val *FixedAddressStructMsServer) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedAddressStructMsServer) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedAddressStructMsServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedAddressStructMsServer(val *FixedAddressStructMsServer) *NullableFixedAddressStructMsServer {
	return &NullableFixedAddressStructMsServer{value: val, isSet: true}
}

func (v NullableFixedAddressStructMsServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedAddressStructMsServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
