/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"encoding/json"
	"fmt"
)

// checks if the FixedAddressStruct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FixedAddressStruct{}

// FixedAddressStruct struct for FixedAddressStruct
type FixedAddressStruct struct {
	MsServer             FixedAddressStructMsServer `json:"ms_server"`
	AdditionalProperties map[string]interface{}
}

type _FixedAddressStruct FixedAddressStruct

// NewFixedAddressStruct instantiates a new FixedAddressStruct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedAddressStruct(msServer FixedAddressStructMsServer) *FixedAddressStruct {
	this := FixedAddressStruct{}
	this.MsServer = msServer
	return &this
}

// NewFixedAddressStructWithDefaults instantiates a new FixedAddressStruct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedAddressStructWithDefaults() *FixedAddressStruct {
	this := FixedAddressStruct{}
	return &this
}

// GetMsServer returns the MsServer field value
func (o *FixedAddressStruct) GetMsServer() FixedAddressStructMsServer {
	if o == nil {
		var ret FixedAddressStructMsServer
		return ret
	}

	return o.MsServer
}

// GetMsServerOk returns a tuple with the MsServer field value
// and a boolean to check if the value has been set.
func (o *FixedAddressStruct) GetMsServerOk() (*FixedAddressStructMsServer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MsServer, true
}

// SetMsServer sets field value
func (o *FixedAddressStruct) SetMsServer(v FixedAddressStructMsServer) {
	o.MsServer = v
}

func (o FixedAddressStruct) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FixedAddressStruct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ms_server"] = o.MsServer

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FixedAddressStruct) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ms_server",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFixedAddressStruct := _FixedAddressStruct{}

	err = json.Unmarshal(data, &varFixedAddressStruct)

	if err != nil {
		return err
	}

	*o = FixedAddressStruct(varFixedAddressStruct)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ms_server")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFixedAddressStruct struct {
	value *FixedAddressStruct
	isSet bool
}

func (v NullableFixedAddressStruct) Get() *FixedAddressStruct {
	return v.value
}

func (v *NullableFixedAddressStruct) Set(val *FixedAddressStruct) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedAddressStruct) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedAddressStruct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedAddressStruct(val *FixedAddressStruct) *NullableFixedAddressStruct {
	return &NullableFixedAddressStruct{value: val, isSet: true}
}

func (v NullableFixedAddressStruct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedAddressStruct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
