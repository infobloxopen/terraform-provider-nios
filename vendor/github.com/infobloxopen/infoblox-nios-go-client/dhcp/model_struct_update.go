/*
Infoblox DHCP API

OpenAPI specification for Infoblox NIOS WAPI DHCP objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dhcp

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StructUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StructUpdate{}

// StructUpdate struct for StructUpdate
type StructUpdate struct {
	// Microsoft Server Fields to search fixed address
	MsServer interface{} `json:"ms_server"`
}

type _StructUpdate StructUpdate

// NewStructUpdate instantiates a new StructUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStructUpdate(msServer interface{}) *StructUpdate {
	this := StructUpdate{}
	this.MsServer = msServer
	return &this
}

// NewStructUpdateWithDefaults instantiates a new StructUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStructUpdateWithDefaults() *StructUpdate {
	this := StructUpdate{}
	return &this
}

// GetMsServer returns the MsServer field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *StructUpdate) GetMsServer() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.MsServer
}

// GetMsServerOk returns a tuple with the MsServer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StructUpdate) GetMsServerOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MsServer) {
		return nil, false
	}
	return &o.MsServer, true
}

// SetMsServer sets field value
func (o *StructUpdate) SetMsServer(v interface{}) {
	o.MsServer = v
}

func (o StructUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StructUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MsServer != nil {
		toSerialize["ms_server"] = o.MsServer
	}
	return toSerialize, nil
}

func (o *StructUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ms_server",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStructUpdate := _StructUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStructUpdate)

	if err != nil {
		return err
	}

	*o = StructUpdate(varStructUpdate)

	return err
}

type NullableStructUpdate struct {
	value *StructUpdate
	isSet bool
}

func (v NullableStructUpdate) Get() *StructUpdate {
	return v.value
}

func (v *NullableStructUpdate) Set(val *StructUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableStructUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableStructUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructUpdate(val *StructUpdate) *NullableStructUpdate {
	return &NullableStructUpdate{value: val, isSet: true}
}

func (v NullableStructUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
