/*
Infoblox DNS API

OpenAPI specification for Infoblox NIOS WAPI DNS objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dns

import (
	"encoding/json"
	"fmt"
)

// RecordHostIpv4addrIpv4addr - The IPv4 Address of the host.
type RecordHostIpv4addrIpv4addr struct {
	RecordHostIpv4addrIpv4addrOneOf *RecordHostIpv4addrIpv4addrOneOf
	String                          *string
}

// RecordHostIpv4addrIpv4addrOneOfAsRecordHostIpv4addrIpv4addr is a convenience function that returns RecordHostIpv4addrIpv4addrOneOf wrapped in RecordHostIpv4addrIpv4addr
func RecordHostIpv4addrIpv4addrOneOfAsRecordHostIpv4addrIpv4addr(v *RecordHostIpv4addrIpv4addrOneOf) RecordHostIpv4addrIpv4addr {
	return RecordHostIpv4addrIpv4addr{
		RecordHostIpv4addrIpv4addrOneOf: v,
	}
}

// stringAsRecordHostIpv4addrIpv4addr is a convenience function that returns string wrapped in RecordHostIpv4addrIpv4addr
func StringAsRecordHostIpv4addrIpv4addr(v *string) RecordHostIpv4addrIpv4addr {
	return RecordHostIpv4addrIpv4addr{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RecordHostIpv4addrIpv4addr) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RecordHostIpv4addrIpv4addrOneOf
	err = newStrictDecoder(data).Decode(&dst.RecordHostIpv4addrIpv4addrOneOf)
	if err == nil {
		jsonRecordHostIpv4addrIpv4addrOneOf, _ := json.Marshal(dst.RecordHostIpv4addrIpv4addrOneOf)
		if string(jsonRecordHostIpv4addrIpv4addrOneOf) == "{}" { // empty struct
			dst.RecordHostIpv4addrIpv4addrOneOf = nil
		} else {
			match++
		}
	} else {
		dst.RecordHostIpv4addrIpv4addrOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RecordHostIpv4addrIpv4addrOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RecordHostIpv4addrIpv4addr)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RecordHostIpv4addrIpv4addr)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RecordHostIpv4addrIpv4addr) MarshalJSON() ([]byte, error) {
	if src.RecordHostIpv4addrIpv4addrOneOf != nil {
		return json.Marshal(&src.RecordHostIpv4addrIpv4addrOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RecordHostIpv4addrIpv4addr) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.RecordHostIpv4addrIpv4addrOneOf != nil {
		return obj.RecordHostIpv4addrIpv4addrOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableRecordHostIpv4addrIpv4addr struct {
	value *RecordHostIpv4addrIpv4addr
	isSet bool
}

func (v NullableRecordHostIpv4addrIpv4addr) Get() *RecordHostIpv4addrIpv4addr {
	return v.value
}

func (v *NullableRecordHostIpv4addrIpv4addr) Set(val *RecordHostIpv4addrIpv4addr) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordHostIpv4addrIpv4addr) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordHostIpv4addrIpv4addr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordHostIpv4addrIpv4addr(val *RecordHostIpv4addrIpv4addr) *NullableRecordHostIpv4addrIpv4addr {
	return &NullableRecordHostIpv4addrIpv4addr{value: val, isSet: true}
}

func (v NullableRecordHostIpv4addrIpv4addr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordHostIpv4addrIpv4addr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
