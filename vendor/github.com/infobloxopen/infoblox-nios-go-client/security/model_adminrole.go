/*
Infoblox SECURITY API

OpenAPI specification for Infoblox NIOS WAPI SECURITY objects

API version: 2.13.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security

import (
	"encoding/json"
)

// checks if the Adminrole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Adminrole{}

// Adminrole struct for Adminrole
type Adminrole struct {
	// The reference to the object.
	Ref *string `json:"_ref,omitempty"`
	// The descriptive comment of the Admin Role object.
	Comment *string `json:"comment,omitempty"`
	// The disable flag.
	Disable *bool `json:"disable,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrsPlus *map[string]ExtAttrs `json:"extattrs+,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrsMinus *map[string]ExtAttrs `json:"extattrs-,omitempty"`
	// Extensible attributes associated with the object. For valid values for extensible attributes, see {extattrs:values}.
	ExtAttrs *map[string]ExtAttrs `json:"extattrs,omitempty"`
	// The name of an admin role.
	Name *string `json:"name,omitempty"`
}

// NewAdminrole instantiates a new Adminrole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminrole() *Adminrole {
	this := Adminrole{}
	return &this
}

// NewAdminroleWithDefaults instantiates a new Adminrole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminroleWithDefaults() *Adminrole {
	this := Adminrole{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *Adminrole) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminrole) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *Adminrole) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *Adminrole) SetRef(v string) {
	o.Ref = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Adminrole) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminrole) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Adminrole) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Adminrole) SetComment(v string) {
	o.Comment = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *Adminrole) GetDisable() bool {
	if o == nil || IsNil(o.Disable) {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminrole) GetDisableOk() (*bool, bool) {
	if o == nil || IsNil(o.Disable) {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *Adminrole) HasDisable() bool {
	if o != nil && !IsNil(o.Disable) {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *Adminrole) SetDisable(v bool) {
	o.Disable = &v
}

// GetExtAttrsPlus returns the ExtAttrsPlus field value if set, zero value otherwise.
func (o *Adminrole) GetExtAttrsPlus() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrsPlus) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrsPlus
}

// GetExtAttrsPlusOk returns a tuple with the ExtAttrsPlus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminrole) GetExtAttrsPlusOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrsPlus) {
		return nil, false
	}
	return o.ExtAttrsPlus, true
}

// HasExtAttrsPlus returns a boolean if a field has been set.
func (o *Adminrole) HasExtAttrsPlus() bool {
	if o != nil && !IsNil(o.ExtAttrsPlus) {
		return true
	}

	return false
}

// SetExtAttrsPlus gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrsPlus field.
func (o *Adminrole) SetExtAttrsPlus(v map[string]ExtAttrs) {
	o.ExtAttrsPlus = &v
}

// GetExtAttrsMinus returns the ExtAttrsMinus field value if set, zero value otherwise.
func (o *Adminrole) GetExtAttrsMinus() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrsMinus) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrsMinus
}

// GetExtAttrsMinusOk returns a tuple with the ExtAttrsMinus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminrole) GetExtAttrsMinusOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrsMinus) {
		return nil, false
	}
	return o.ExtAttrsMinus, true
}

// HasExtAttrsMinus returns a boolean if a field has been set.
func (o *Adminrole) HasExtAttrsMinus() bool {
	if o != nil && !IsNil(o.ExtAttrsMinus) {
		return true
	}

	return false
}

// SetExtAttrsMinus gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrsMinus field.
func (o *Adminrole) SetExtAttrsMinus(v map[string]ExtAttrs) {
	o.ExtAttrsMinus = &v
}

// GetExtAttrs returns the ExtAttrs field value if set, zero value otherwise.
func (o *Adminrole) GetExtAttrs() map[string]ExtAttrs {
	if o == nil || IsNil(o.ExtAttrs) {
		var ret map[string]ExtAttrs
		return ret
	}
	return *o.ExtAttrs
}

// GetExtAttrsOk returns a tuple with the ExtAttrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminrole) GetExtAttrsOk() (*map[string]ExtAttrs, bool) {
	if o == nil || IsNil(o.ExtAttrs) {
		return nil, false
	}
	return o.ExtAttrs, true
}

// HasExtAttrs returns a boolean if a field has been set.
func (o *Adminrole) HasExtAttrs() bool {
	if o != nil && !IsNil(o.ExtAttrs) {
		return true
	}

	return false
}

// SetExtAttrs gets a reference to the given map[string]ExtAttrs and assigns it to the ExtAttrs field.
func (o *Adminrole) SetExtAttrs(v map[string]ExtAttrs) {
	o.ExtAttrs = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Adminrole) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Adminrole) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Adminrole) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Adminrole) SetName(v string) {
	o.Name = &v
}

func (o Adminrole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Adminrole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["_ref"] = o.Ref
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Disable) {
		toSerialize["disable"] = o.Disable
	}
	if !IsNil(o.ExtAttrsPlus) {
		toSerialize["extattrs+"] = o.ExtAttrsPlus
	}
	if !IsNil(o.ExtAttrsMinus) {
		toSerialize["extattrs-"] = o.ExtAttrsMinus
	}
	if !IsNil(o.ExtAttrs) {
		toSerialize["extattrs"] = o.ExtAttrs
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableAdminrole struct {
	value *Adminrole
	isSet bool
}

func (v NullableAdminrole) Get() *Adminrole {
	return v.value
}

func (v *NullableAdminrole) Set(val *Adminrole) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminrole) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminrole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminrole(val *Adminrole) *NullableAdminrole {
	return &NullableAdminrole{value: val, isSet: true}
}

func (v NullableAdminrole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminrole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
